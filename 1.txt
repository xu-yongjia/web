后台管理：
出错：
{
    "status":201,
    "msg":"json参数格式有误",
    data:{}
}
//其他错误仿照这个格式，status为201，msg为错误原因，例如“账号不存在”，“密码不正确”等
鉴权失败：
{
    "status":404,
    "msg":"token鉴权失败",
    data:{}
}
//需要包含token的请求，在未添加token或者token过期时，就会在中间件被拦截，而不会进入处理函数
//两种错误回复不多重复，所有请求都可以返回者两种错误
//无特别说明，下面每对json，第一个是请求的，第二个是返回的
1.管理人员登录，账号/密码/食堂
登录：
{
    "canteen_id":1,//将canteen_id作为主键
    "password":"123456"
}
{
    "token":"aksdujfhajkhwebgaksduae"
}
以下api均需要在发送请求时在头部字段加上token
2.用户显示
{
    "page":2,
    "num_each_page":15
}
{
    "status":"200",
    "msg":"OK",
    "data":{
        "count":20,//user表的总记录数，用于让前端计算页数
        "userlist":[//一个列表，在user表中按照“page”和“num_each_page”所指定的范围进行查找，页号从1开始
            {
                "user_id":"123456",//账号
                "user_name":"123456",//账号名
                "phone":"189999999999",//号主的联系电话
                "addresss":[//用户的所有地址记录（从address数据库中按照user_id查找）
                    {
                        "id":3,//地址记录的id，地址与账号是多对一关系
                        "user_id":123,
                        "user_name":"小明",//这里是地址记录的收藏人姓名，而不是账号名
                        "phone":"13999999999",//这里是收餐人电话，而不是账号所有人的电话
                        "address":"榕11",
                    },
                    {
                        "id":4,
                        "user_id":"123456",
                        "user_name":"李华",
                        "phone":"15333333333",
                        "address":"荔3"
                    }
                ]
            }
        ]
    }
}

3.配送员显示
{
    "page":2,
    "num_each_page":15,
    "canteen_number":1//是哪个食堂负责配送的员工
}
{
    "status":"200",
    "msg":"OK",
    "data":{
        "count":20,//该食堂所有配送员工的总记录数，用于让前端计算页数
        "deliverlist":[//一个列表，在deliver表中按照“page”和“num_each_page”所指定的范围进行查找，页号从1开始
            {
                "truename":"李华",
                "phone":"12332112345"
                "canteen_number":1,
                //active字段暂时废弃不用
            }
        ]
    }
}
4.配送员增删改
//如进行增删改的页面中需要显示配送员列表，那么为了显示变化后的配送员列表，需要页面重新发起获取配送员列表的请求
//如果希望改为每次进行增删改时，在返回报文中携带新的列表数据（前台习惯实现方式），请告知我
删除：
{
    "deliver_id":5,
}
{
    "status":200,
    "msg":"OK",
    "data":{}
}
增加：
{
    "canteen_id":1,
    "truename":"李华",
    "phone":"12332112345"
    "canteen_number":1,
}
{//向数据库插入记录，id由数据库自动分配（是自增主键）
    "status":200,
    "msg":"OK",
    "data":{}
}
修改:
{
    "deliver_id":123,
    "truename":"李华",
    "phone":"12332112345",
    "canteen_number":1,
}
{//更新数据库中具有该“deliver_id”的记录
    "status":200,
    "msg":"OK",
    "data":{}
}
//可能的错误：“记录不存在”
5.菜品分类别显示
查询分类：
{
    "canteen_id":1
}
{
    "category_list":[
        {
            "category_id":123,
            "category_name":"烧卤",
        }
    ]
}
//同样的，需要重新请求类别列表，如想用其他实现方式请告知我
增加分类：
{
    "canteen_id":1
    "category_name":"烧卤"
}
{//category_id是主键，自动分配
    "status":200,
    "msg":"OK",
    "data":{}
}
删除分类：
①{
    "category_id":123
}
{//此接口只删除分类，如果该分类下有菜品（在product中按“category_id”查找），返回201，“该类别中包含菜品信息，是否同步删除”
    "status":200,
    "msg":"OK"
    "data":{}
}
②{//上一个接口返回“该类别中包含菜品信息，是否同步删除”后，如果前端继续删除操作，则发送到这一个接口
    "category_id":123
}
{//此接口会在删除分类的同时删除该类别下的所有菜品记录（在product表中按照category_id查找并删除）
    "status":200,
    "msg":"OK",
    "data":{}
}
修改分类：//重命名分类
{
    "category_id":123,
    "category_name":"自选",
}
{//因为product中只有category_id这一个外键，所以修改category_name时不需要修改product表
    "status":200,
    "msg":"OK",
    "data":{}
}
6.菜品增删改
增加菜品：
{//图片不在这个接口上传
    "name":"烧鸭",
    "canteen_id":1,
    "category_id":123,
    "info":"每份50g",
    "price":"5.00",
    "discount_price":"4.50",
    "title":"热卖！"
}
{//未给出的字段为空值
    "status":200,
    "msg":"OK",
    "data":{}
}
获取菜品：
{
    "page":3,//第几页
    "limit":15,//每页多少记录
    "canteen_id":1,//食堂id
    "category_id":1//种类id
}
{
    "status":200,
    "msg":"OK",
    "data":{
        "count":50,//菜品表的总记录数
        "productlist":[//在product表中按照canteen_id和category_id查找（如果是空值，则取消其限制，因此有四种可能的查找方式，无限制，单限制*2，双限制）
            {
                "id":123
                "name":"烧鸭",
                "category_id":123,
                "category_name":"烧卤"//通过
                "info":"每份50g",
                "img_path":"https://alib......",
                "price":"5.00",
                "discount_price":"4.50",
                "title":"热卖！"
                "score":"4.0"//评分是在评论时统计的，不需要商家管理，也不容许商家修改
            },
            {
                ……………………
            }
        ]
    }
}
修改菜品：
{
    "id":123,
    "name":"烧鸭",
    "canteen_id":1,
    "category_id":123,
    "info":"每份50g",
    "price":"5.00",
    "discount_price":"4.50",
    "title":"热卖！"
}
{
    "msg":"OK",
    "status":"200",
    "data":{}
}
删除菜品：
{
    "product_id":123
}
{//在order表中有状态非“已送达”的，product_id与参数中的id相同的记录，则不能删除。否则删除的同时，还要删除cart表中的具有该product_id的记录
    "msg":"OK",
    "status":"200",
    "data":{}
}//可能的错误：“有未完成的该商品订单，删除失败”
7.上传菜品图片
{
    "product_id":123,
    "type":"大图"//或者“小图”
}
{
    请参照已放在API_back的“uploadImg.go”文件，稍作修改即可使用，具体用法我也不清楚，未测试过，届时自己调试
    大图需要将图片在云端的url保存到product表中具有指定product_id的记录的img_path字段中
    小图需要将图片在云端的url保存到数据表product_img中
}
8.订单显示
//暂不考虑显示图片等不在order表中的信息
{//status将查询结果限制为特定状态的order记录，如果status为空，则查找并返回所有记录
    "page":3,
    "num_each_page":15,
    "canteen_id":2,
    "status":"已支付"
}
{
    "msg":"OK",
    "status":200,
    "data":{
        "count":30//具有该canteen_id和该status的记录总数，用于给前端计算页数
        "orderlist":[//“已支付”和“送餐中”按照updated_at从早到晚排序
            {
                "id":123,
                "created_at":"2023.6.4 12:23:34",//gorm.Model.CreatedAt字段，时间的格式会稍有不同
                "updated_at":"2023.6.4 12.34.56",//gorm.Model.UpdatedAt字段
                "order_id":45,//可能有多条orderlist是同一次下单产生，具有相同的OrderID,而ID不同
                "user_name":"小明"//这个是address表的username而不是user表的username
                "user_id":123456//这个是user表的id
                "address":"榕11",
                "product_id":23,
                "num":3,//下单的份数
                "user_phone":"153333333333",
                "status":"已支付",
                "canteen":2,
                "deliver_id":45,
                "deliver_name":"张三",
                "deliver_phone":"12332112345"
            }
        ]
    }
}
9.订单指派配送员
{
    "order_id_list":[23,24,25],
    "deliver_id":17
}
{//分别按照order_id_list的每个id，找到order表中的记录，将其状态从“已支付”改为“送餐中”，并按照deliver_id找到deliver记录，将其姓名和电话信息添加到order的deliver_id,deliver_name,deliver_phone中
    "msg":"OK",
    "status":200,
    "data":{}
}
10.上传轮播图
//具体的参数可能需要更多，但这里只给必须注意的
{
    "canteen_id":1
}
{
    将图片上传到云端，将url替换到category表中具有该canteen_id的记录上（如果之前没有该canteen_id的记录，则新建记录）
}